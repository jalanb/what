The whyp.paths module
=======================

    >>> from whyp import paths
    >>> assert 'functional approach to paths' in paths.__doc__

More modules for testing
------------------------

    >>> import os

Fail early
----------

Module offers the tradional isfile(), isdir(), ... for paths
    but at module level

When the condition fails nothing as made
    >>> nothing = paths.exists('/not/a/real/path')
    >>> assert not nothing

    >>> from whyp.path import path

When the check passes, they give a path
    >>> usr_local_bin = path('/usr/local/bin')
    >>> assert usr_local_bin.isdir()

Check for files and dirs
    >>> python_executable = path(
    ...     '/usr/bin/env python -c "import sys; sys.output.write(sys.executable)"'
    ... )
    >>> assert python_executable.isfile()


Functions that paths offer
--------------------------

Has handy methods proxied from os.path:
    basename, dirname, realpath, ...

    >>> assert local_file.base() == 'python'
    >>> assert local_file.dir() == usr_local_bin
    >>> assert local_file.base() == 'python'

    >>> assert local_dir.base() == 'bin'
    >>> assert local_dir.real() == usr_local_bin == local_dir.dir()

There is the tradtional operator for /
    >>> assert local_dir / 'python' == local_file

Same and different paths
    >>> assert local_dir == usr_local_bin
    >>> assert local_dir != local_file

In the same directory:
    >>> assert local_file.dir() == local_dir.dir()
    >>> assert local_file.sibling(local_dir)

Pretty good chances that python is a link
    >>> real_python_file = local_file.real()

So it is a file
    >>> assert real_python_file
    >>> assert real_python_file.isfile()

But that path file different from the original
    >>> assert real_python_file != local_file

Bad paths have nothing of interest
    >>> unreal_dir = path('/not/a/real/bin')
    >>> assert not unreal_dir.exists()
    >>> assert not unreal_dir.isdir()
    >>> assert unreal_dir.dir()
    >>> assert unreal_dir.name

    >>> unreal_file = path('/not/a/real/path')
    >>> assert not unreal_file.exists()
    >>> assert not unreal_file.real()

    >>> assert not unreal_file.is_file()
    >>> assert unreal_file.file()
    >>> assert unreal_file.base()


The dirname either gets the name of the given directory
    of the name of parent dir if a file is given
    >>> dir_dirname = local_dir.dirname()
    >>> file_dirname = local_file.dirname()
    >>> assert dir_dirname == file_dirname


    >>> assert local_file.dir().dir() == usr_local_bin
