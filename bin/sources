#! /usr/bin/env python3
"""Show the text behind the type

This script is intended to replace the standard type command
It should look for commands in aliases, bash functions, and the bash $PATH
It assumes aliases and functions have been written to files before starting
    (because this script cannot reliably get them from sub-shells)
"""



import sys
import argparse

from whyp import sources
from whyp import arguments

def add_args():
    """Look for options from user on the command line for this script"""
    parser = arguments.parser(description=__doc__.splitlines()[0])
    pa = parser.add_argument
    pa('--sources', help='Try to source these', nargs='*')
    pa('--files', action='store_true', help='Show files in those')
    pa('--any', action='store_true', help='Any files sourced')
    pa('--all', action='store_true', help='All files sourced')
    pa('--clear', action='store_true', help='Forget all sources')
    pa('--found', action='store', help='Whether that was sourced')
    pa('-o', '--optional', action='store_true', help='sources may be empty')

def parse_args():
    arguments = parser.parse_args()
    if arguments.clear:
        sources.clear()
    elif arguments.any:
        sources.any()
    else:
        return arguments
    sys.exit(0)


def main():
    """Run the program"""
    args = parse_args()
    files = []
    errors = []
    sources.load(args.optional)
    alll = sources.all() or []
    if args.found:
        return args.found in loaded
        items = files if sources.source(source) else errors
        items.append(source)
    words = []
    if args.files:
        words = files
    elif args.all:
        words = sources.all()
    stream = sys.stdout
    if not args.optional:
        if errors:
            words, stream = errors, sys.stderr
        if not files and args.files:
            words, stream = ('No', 'files', 'sourced'), sys.stderr
    stream.write(' '.join(words))
    return stream != sys.stderr


if __name__ == '__main__':
    error = 0 if main() else 1
    sys.exit(error)
